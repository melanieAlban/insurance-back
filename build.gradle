plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
    id "org.sonarqube" version "6.0.1.5171"
}

group = 'com.fram'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.liquibase:liquibase-core'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.modelmapper:modelmapper:3.2.2'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'com.mashape.unirest:unirest-java:1.4.9'
    implementation 'com.mailgun:mailgun-java:1.1.3'
    implementation 'com.lowagie:itext:2.1.7'
    implementation 'org.apache.poi:poi:5.2.3'
    implementation 'org.apache.poi:poi-ooxml:5.2.3'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.6'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.xhtmlrenderer:flying-saucer-pdf:9.1.22'
    implementation 'com.itextpdf:itext7-core:8.0.3@pom'
    implementation 'com.stripe:stripe-java:29.3.0-beta.1'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.postgresql:postgresql'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    runtimeOnly 'com.h2database:h2'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'io.cucumber:cucumber-java:7.18.0'
    testImplementation 'io.cucumber:cucumber-spring:7.18.0'
    testImplementation 'io.cucumber:cucumber-junit-platform-engine:7.18.0'
}

tasks.named('test') {
    useJUnitPlatform()
    ignoreFailures = true 
}

jacoco {
    toolVersion = "0.8.10"
}

sonarqube {
    properties {
        property 'sonar.jacoco.reportPaths', "$buildDir/jacoco/test.exec"
        property "sonar.projectKey", "rafaelsoriano04_insurance-manager"
        property "sonar.organization", "rafaelsoriano04"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

jacocoTestReport {
    dependsOn test
    reports {
        html.required.set(true)
        xml.required.set(true)
        csv.required.set(false)
    }
    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, exclude: [
                            '**/InsuranceManagerApplication.class',
                            '**/config/**',
                            '**/dto/**',
                            '**/entity/**',
                            '**/repository/**',
                            '**/exceptions/**',
                            'com/fram/insurance_manager/config/exception/GlobalExceptionHandler.java'

                    ])
                })
        )
    }
}
